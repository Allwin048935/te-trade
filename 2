import ccxt
import pandas as pd
import time

# Initialize Binance API
binance = ccxt.binance({
    'apiKey': 'JSUaiFx3vAeuvtXLuImGEBPcMSrwjRMWDOqGp91AlRuX63PwEqXnKWJQmfEcSXvR',
    'secret': 'FtmsQbpCDIc64BaQ6s5l5VHHWfwrCbqsjytVMo5cHXetrsUsZBa9AqHiRtkkieMH',
})

# Define EMA periods
ema_short_period = 7
ema_medium_period = 20
ema_long_period = 30
fixed_quantity_usdt = 11

def fetch_ohlc(symbol, timeframe, limit):
    # Fetch historical candlestick data
    ohlc = binance.fetch_ohlcv(symbol, timeframe, limit=limit)
    
    # Convert data to DataFrame
    df = pd.DataFrame(ohlc, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    
    # Convert timestamp to datetime
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    
    return df

def calculate_ema(data, period):
    # Calculate Exponential Moving Average
    return data['close'].ewm(span=period, adjust=False).mean()

def execute_order(symbol, side, quantity):
    # Execute market order
    order = binance.create_market_order(symbol=symbol, type='market', side=side, amount=quantity)
    
    # Print order details
    print(f"Order Executed - Symbol: {symbol}, Side: {side}, Quantity: {amount}, Order ID: {order['id']}")

def get_open_orders(symbol):
    # Retrieve open orders
    orders = binance.fetch_open_orders(symbol=symbol)
    return orders

def close_order(symbol, order_id):
    # Close an existing order
    binance.cancel_order(order_id, symbol=symbol)
    print(f"Order Closed - Symbol: {symbol}, Order ID: {order_id}")

def calculate_quantity(symbol, side):
    # Calculate the quantity based on the fixed USDT amount
    ticker = binance.fetch_ticker(symbol)
    last_price = ticker['last']
    if side == 'buy':
        quantity = fixed_quantity_usdt / last_price
    elif side == 'sell':
        quantity = fixed_quantity_usdt / last_price
    else:
        quantity = 0
    return quantity

def main():
    symbol = 'BTC/USDT'
    timeframe = '1h'
    limit = 100
    
    while True:
        # Fetch historical data
        historical_data = fetch_ohlc(symbol, timeframe, limit)
        
        # Calculate EMAs
        historical_data['ema_short'] = calculate_ema(historical_data, ema_short_period)
        historical_data['ema_medium'] = calculate_ema(historical_data, ema_medium_period)
        historical_data['ema_long'] = calculate_ema(historical_data, ema_long_period)
        
        # Retrieve open orders
        open_orders = get_open_orders(symbol)
        
        # Buy only when short EMA crosses over the long EMA
        if historical_data['ema_short'].iloc[-1] > historical_data['ema_long'].iloc[-1] and \
           historical_data['ema_short'].iloc[-2] <= historical_data['ema_long'].iloc[-2]:
            # Calculate buy quantity
            quantity = calculate_quantity(symbol, 'buy')
            # Execute buy order
            execute_order(symbol, 'buy', quantity)
    
        # Sell only when short EMA crosses down below the long EMA
        elif historical_data['ema_short'].iloc[-1] < historical_data['ema_long'].iloc[-1] and \
             historical_data['ema_short'].iloc[-2] >= historical_data['ema_long'].iloc[-2]:
            # Calculate sell quantity
            quantity = calculate_quantity(symbol, 'sell')
            # Execute sell order
            execute_order(symbol, 'sell', quantity)
    
        # Close existing buy order when short EMA crosses down below the medium EMA
        elif historical_data['ema_short'].iloc[-1] < historical_data['ema_medium'].iloc[-1] and \
             historical_data['ema_short'].iloc[-2] >= historical_data['ema_medium'].iloc[-2]:
            for order in open_orders:
                if order['side'] == 'buy':
                    close_order(symbol, order['id'])
    
        # Close existing short order when short EMA crosses over the medium EMA
        elif historical_data['ema_short'].iloc[-1] > historical_data['ema_medium'].iloc[-1] and \
             historical_data['ema_short'].iloc[-2] <= historical_data['ema_medium'].iloc[-2]:
            for order in open_orders:
                if order['side'] == 'sell':
                    close_order(symbol, order['id'])
    
        # Sleep for a while before the next iteration (adjust as needed)
        time.sleep(600)  # Sleep for 10 minutes
    
if __name__ == "__main__":
    main()