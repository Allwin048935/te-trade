import ccxt
import pandas as pd

# Replace with your Binance API key and secret
api_key = 'your_api_key'
api_secret = 'your_api_secret'

# Initialize Binance client
binance = ccxt.binance({
    'apiKey': api_key,
    'secret': api_secret,
})

# Define trading symbol and time frame
symbol = 'BTC/USDT'
timeframe = '1h'

# Function to get historical candlestick data
def get_historical_data(symbol, timeframe, limit=100):
    ohlcv = binance.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to implement 3 EMA crossover strategy
def ema_crossover_strategy(df, short_ema, long_ema):
    df['short_ema'] = df['close'].ewm(span=short_ema, adjust=False).mean()
    df['long_ema'] = df['close'].ewm(span=long_ema, adjust=False).mean()
    df['signal'] = 0  # 0 for no signal, 1 for buy, -1 for sell

    df.loc[df['short_ema'] > df['long_ema'], 'signal'] = 1
    df.loc[df['short_ema'] < df['long_ema'], 'signal'] = -1

    return df

# Function to execute trades based on signals
def execute_trades(df):
    for i in range(1, len(df)):
        if df['signal'][i] == 1 and df['signal'][i - 1] != 1:
            print(f"Buy signal at {df.index[i]}, Price: {df['close'][i]}")
            # Implement buy order logic here using Binance API
        elif df['signal'][i] == -1 and df['signal'][i - 1] != -1:
            print(f"Sell signal at {df.index[i]}, Price: {df['close'][i]}")
            # Implement sell order logic here using Binance API

# Main function to run the trading bot
def main():
    short_ema_period = 9
    long_ema_period = 21

    # Fetch historical data
    historical_data = get_historical_data(symbol, timeframe)

    # Implement EMA crossover strategy
    strategy_data = ema_crossover_strategy(historical_data, short_ema_period, long_ema_period)

    # Execute trades based on signals
    execute_trades(strategy_data)

if __name__ == "__main__":
    main()