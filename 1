import ccxt
import pandas as pd
import time

# Initialize Binance API for Futures
api_key = 'JSUaiFx3vAeuvtXLuImGEBPcMSrwjRMWDOqGp91AlRuX63PwEqXnKWJQmfEcSXvR'
api_secret = 'FtmsQbpCDIc64BaQ6s5l5VHHWfwrCbqsjytVMo5cHXetrsUsZBa9AqHiRtkkieMH'
symbol = 'BTC/USDT'
timeframe = '1m'
short_ema_period = 9
medium_ema_period = 21
long_ema_period = 50
confirmation_buffer = 2  # Number of consecutive periods to confirm the cross
fixed_quantity_usdt = 11  # Fixed quantity in USDT for each trade

# Set up the Binance Futures exchange
exchange = ccxt.binance({
    'apiKey': apiKey,
    'secret': secret,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',
    },
})

# Function to place a market order
def place_order(side, quantity):
    try:
        order = exchange.create_market_buy(symbol=symbol, quantity=quantity) if side == 'buy' else exchange.create_market_sell(symbol=symbol, quantity=quantity)
        print(f"Order placed: {order}")
        return order
    except ccxt.BaseError as e:
        print(f"Failed to place order: {e}")

# Fetch historical data
ohlcv = exchange.fetch_ohlcv(symbol, timeframe)
df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
df.set_index('timestamp', inplace=True)

# Calculate EMAs
df['short_ema'] = df['close'].ewm(span=short_ema_period, adjust=False).mean()
df['medium_ema'] = df['close'].ewm(span=medium_ema_period, adjust=False).mean()
df['long_ema'] = df['close'].ewm(span=long_ema_period, adjust=False).mean()

# Initialize position and confirmation counters
position = None
confirm_count = 0

amount=quantity 
# Trading logic
for i in range(long_ema_period, len(df)):
    if df['short_ema'][i] > df['medium_ema'][i] and df['short_ema'][i - 1] <= df['medium_ema'][i - 1]:
        # Short EMA crosses over Medium EMA, start confirmation count
        confirm_count += 1

        if confirm_count >= confirmation_buffer and position != 'long':
            print('Confirmed Long Position')
            quantity = fixed_quantity_usdt / df['close'][i]  # Calculate quantity based on fixed USDT amount
            place_order('buy', amount)
            position = 'long'
            confirm_count = 0  # Reset confirmation count

    elif df['short_ema'][i] < df['medium_ema'][i] and df['short_ema'][i - 1] >= df['medium_ema'][i - 1]:
        # Short EMA crosses under Medium EMA, start confirmation count
        confirm_count += 1

        if confirm_count >= confirmation_buffer and position != 'short':
            print('Confirmed Short Position')
            quantity = fixed_quantity_usdt / df['close'][i]  # Calculate quantity based on fixed USDT amount
            place_order('sell', amount)
            position = 'short'
            confirm_count = 0  # Reset confirmation count

    elif df['short_ema'][i] < df['medium_ema'][i] and df['short_ema'][i - 1] > df['medium_ema'][i - 1]:
        # Short EMA crosses under Medium EMA, close existing long position
        if position == 'long':
            print('Close Long Position')
            quantity = fixed_quantity_usdt / df['close'][i]  # Calculate quantity based on fixed USDT amount
            place_order('sell', amount)
            position = None

    elif df['short_ema'][i] > df['medium_ema'][i] and df['short_ema'][i - 1] < df['medium_ema'][i - 1]:
        # Short EMA crosses over Medium EMA, close existing short position
        if position == 'short':
            print('Close Short Position')
            quantity = fixed_quantity_usdt / df['close'][i]  # Calculate quantity based on fixed USDT amount
            place_order('buy', amount)
            position = None

    time.sleep(1)  # Add a delay to avoid hitting rate limits